{"version":3,"sources":["Tree.js"],"names":["define","LiteGUI","Tree","data","options","legacy","constructor","String","id","console","warn","root","document","createElement","this","className","tree","that","allow_rename","allow_drag","allow_multiselection","indent_offset","height","style","Math","round","collapsed_depth","addEventListener","e","srcElement","onBackgroundClicked","button","onContextMenu","preventDefault","root_item","createAndInsert","INDENT","prototype","updateTree","innerHTML","insertItem","parent_id","position","childNodes","dataset","element","_updateListBox","_findElement","element_index","parent_element_index","_findElementIndex","undefined","parent","child_level","parseInt","createTreeItem","getItem","appendChild","_insertInside","_isNodeChildrenVisible","classList","add","children","i","length","selected","markAsSelected","parent_index","offset_index","level","parent_level","indent","querySelector","paddingLeft","j","new_childNode","contains","current_level","insertBefore","node","listbox","getValue","childNode","_findElementLastChildIndex","start_index","_findChildElements","only_direct","result","push","safe_id","replace","DOM","title_element","content","precontent","postcontent","visible","display","row","stopPropagation","_editing","ctrlKey","isNodeSelected","remove","trigger","item","r","callback","call","onItemAddToSelection","shiftKey","last_item","getSelectedItem","nodeList","Array","slice","parentNode","last_index","indexOf","current_index","items","_skip_scroll","onItemSelected","title","_old_name","that2","input","new_name","target","value","setTimeout","old_name","keyCode","blur","focus","onItemContextMenu","draggable_element","draggable","ev","dataTransfer","setData","onDragData","drag_data","count","skipdrag","item_id","getData","event","onDropItem","onMoveItem","moveItem","parent_item","error","filterByName","name","str","toLowerCase","filterByRule","callback_to_filter","param","expandItem","parents","setValue","getParent","collapseItem","isInsideArea","rects","getClientRects","h","y","offsetTop","scrollTop","scrollToItem","container","rect","getBoundingClientRect","x","width","scrollLeft","setSelectedItem","scroll","send_event","unmarkAllAsSelected","addItemToSelection","removeItemFromSelection","getSelectedItems","querySelectorAll","isItemSelected","getChildren","id_or_node","getAncestors","isAncestor","child","dest","old_parent","level_offset","unshift","removeChild","new_level","removeItem","remove_children","child_nodes","updateItem","updateItemId","old_id","new_id","clear","keep_root","getNodeByIndex","index","selected_array","semiselected","add_to_existing_selection","visited","pre","box","createLitebox","onClickBox","setEmpty","collapsed","collapse","child_elements","child_parent"],"mappings":"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","file":"../Tree.js","sourcesContent":["//enclose in a scope\r\ndefine([\r\n\t\"./litegui\"\r\n],function(LiteGUI){\r\n\r\n\r\n\r\n/**\r\n* To create interactive trees (useful for folders or hierarchies).<br>\r\n* Options are:<br>\r\n*\t+ allow_multiselection: allow to select multiple elements using the shift key<br>\r\n*\t+ allow_rename: double click to rename items in the tree<br>\r\n*\t+ allow_drag: drag elements around<br>\r\n*\t+ height<br>\r\n* Item data should be in the next format:<br>\r\n* {<br>\r\n*    id: unique_identifier,<br>\r\n*    content: what to show in the HTML (if omited id will be shown)<br>\r\n*\t children: []  array with another object with the same structure<br>\r\n*\t className: class<br>\r\n*    precontent: HTML inserted before the content<br>\r\n*\t visible: boolean, to hide it<br>\r\n*\t dataset: dataset for the element<br>\r\n*\t onDragData: callback in case the user drags this item somewhere else<br>\r\n* }<br>\r\n* To catch events use tree.root.addEventListener(...)<br>\r\n* item_selected : receive { item: node, data: node.data }<br>\r\n* item_dblclicked<br>\r\n* item_renamed<br>\r\n* item_moved<br>\r\n*\r\n* @class Tree\r\n* @constructor\r\n*/\r\n\r\n\t/*********** LiteTree *****************************/\r\n\tfunction Tree( data, options, legacy )\r\n\t{\r\n\t\tif(legacy || (data && data.constructor === String) )\r\n\t\t{\r\n\t\t\tvar id = data;\r\n\t\t\tdata = options;\r\n\t\t\toptions = legacy || {};\r\n\t\t\toptions.id = id;\r\n\t\t\tconsole.warn(\"LiteGUI.Tree legacy parameter, use data as first parameter instead of id.\");\r\n\t\t}\r\n\r\n\t\toptions = options || {};\r\n\r\n\t\tvar root = document.createElement(\"div\");\r\n\t\tthis.root = root;\r\n\t\tif(options.id)\r\n\t\t\troot.id = options.id;\r\n\r\n\t\troot.className = \"litetree\";\r\n\t\tthis.tree = data;\r\n\t\tvar that = this;\r\n\t\toptions = options || {allow_rename: false, allow_drag: true, allow_multiselection: false};\r\n\t\tthis.options = options;\r\n\t\tthis.indent_offset = options.indent_offset || 0;\r\n\r\n\t\tif(options.height)\r\n\t\t\tthis.root.style.height = typeof(options.height) == \"string\" ? options.height : Math.round(options.height) + \"px\";\r\n\r\n        this.collapsed_depth = 3;\r\n        if(options.collapsed_depth != null)\r\n            this.collapsed_depth = options.collapsed_depth;\r\n\r\n\t\t//bg click\r\n\t\troot.addEventListener(\"click\", function(e){\r\n\t\t\tif(e.srcElement != that.root)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif(that.onBackgroundClicked)\r\n\t\t\t\tthat.onBackgroundClicked(e,that);\r\n\t\t});\r\n\r\n\t\t//bg click right mouse\r\n\t\troot.addEventListener(\"contextmenu\", function(e) { \r\n\t\t\tif(e.button != 2) //right button\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tif(that.onContextMenu) \r\n\t\t\t\tthat.onContextMenu(e);\r\n\t\t\te.preventDefault(); \r\n\t\t\treturn false;\r\n\t\t});\r\n\r\n\r\n\t\tvar root_item = this.createAndInsert(data, options, null);\r\n\t\tif(!root_item)\r\n\t\t\tthrow(\"Error in LiteGUI.Tree, createAndInsert returned null\");\r\n\t\troot_item.className += \" root_item\";\r\n\t\t//this.root.appendChild(root_item);\r\n\t\tthis.root_item = root_item;\r\n\t}\r\n\r\n\tTree.INDENT = 20;\r\n\r\n\r\n\t/**\r\n\t* update tree with new data (old data will be thrown away)\r\n\t* @method updateTree\r\n\t* @param {object} data\r\n\t*/\r\n\tTree.prototype.updateTree = function( data )\r\n\t{\r\n\t\tthis.root.innerHTML = \"\";\r\n\t\tvar root_item = this.createAndInsert( data, this.options, null );\r\n\t\tif(root_item)\r\n\t\t{\r\n\t\t\troot_item.className += \" root_item\";\r\n\t\t\tthis.root_item = root_item;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.root_item = null;\r\n\t}\r\n\r\n\t/**\r\n\t* update tree with new data (old data will be thrown away)\r\n\t* @method insertItem\r\n\t* @param {object} data\r\n\t* @param {string} parent_id\r\n\t* @param {number} position index in case you want to add it before the last position\r\n\t* @param {object} options\r\n\t* @return {DIVElement}\r\n\t*/\r\n\tTree.prototype.insertItem = function( data, parent_id, position, options)\r\n\t{\r\n\t\tif(!parent_id)\r\n\t\t{\r\n\t\t\tvar root = this.root.childNodes[0];\r\n\t\t\tif(root)\r\n\t\t\t\tparent_id = root.dataset[\"item_id\"];\r\n\t\t}\r\n\r\n\t\tvar element = this.createAndInsert( data, options, parent_id, position );\r\n\r\n\t\t//update parent collapse button\r\n\t\tif(parent_id)\r\n\t\t\tthis._updateListBox( this._findElement(parent_id) ); //no options here, this is the parent\r\n\r\n\r\n\t\treturn element;\r\n\t}\r\n\r\n\tTree.prototype.createAndInsert = function( data, options, parent_id, element_index )\r\n\t{\r\n\t\t//find parent\r\n\t\tvar parent_element_index = -1;\r\n\t\tif(parent_id)\r\n\t\t\tparent_element_index = this._findElementIndex( parent_id );\r\n\t\telse if(parent_id === undefined)\r\n\t\t\tparent_element_index = 0; //root\r\n\r\n\t\tvar parent = null;\r\n\t\tvar child_level = 0;\r\n\r\n\t\t//find level\r\n\t\tif(parent_element_index != -1)\r\n\t\t{\r\n\t\t\tparent = this.root.childNodes[ parent_element_index ];\r\n\t\t\tchild_level = parseInt( parent.dataset[\"level\"] ) + 1;\r\n\t\t}\r\n\r\n\t\t//create\r\n\t\tvar element = this.createTreeItem( data, options, child_level );\r\n\t\tif(!element) //error creating element\r\n\t\t\treturn;\r\n\r\n\t\telement.parent_id = parent_id;\r\n\r\n\t\t//check\r\n\t\tvar existing_item = this.getItem( element.dataset[\"item_id\"] );\r\n\t\tif( existing_item )\r\n\t\t\tconsole.warn(\"There another item with the same ID in this tree\");\r\n\r\n\t\t//insert\r\n\t\tif(parent_element_index == -1)\r\n\t\t\tthis.root.appendChild( element );\r\n\t\telse\r\n\t\t\tthis._insertInside( element, parent_element_index, element_index );\r\n\r\n\t\t//compute visibility according to parents\r\n\t\tif( parent && !this._isNodeChildrenVisible( parent_id ) )\r\n\t\t\telement.classList.add(\"hidden\");\r\n\r\n\t\t//children\r\n\t\tif(data.children)\r\n\t\t{\r\n\t\t\tfor(var i = 0; i < data.children.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tthis.createAndInsert( data.children[i], options, data.id );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//update collapse button\r\n\t\tthis._updateListBox( element, options, child_level );\r\n\r\n\t\tif(options && options.selected)\r\n\t\t\tthis.markAsSelected( element, true );\r\n\r\n\t\treturn element;\r\n\t}\r\n\r\n\t//element to add, position of the parent node, position inside children, the depth level\r\n\tTree.prototype._insertInside = function( element, parent_index, offset_index, level )\r\n\t{\r\n\t\tvar parent = this.root.childNodes[ parent_index ];\r\n\t\tif(!parent)\r\n\t\t\tthrow(\"No parent node found, index: \" + parent_index +\", nodes: \" + this.root.childNodes.length );\r\n\r\n\t\tvar parent_level = parseInt( parent.dataset[\"level\"] );\r\n\t\tvar child_level = level !== undefined ? level : parent_level + 1;\r\n\r\n\t\tvar indent = element.querySelector(\".indentblock\");\r\n\t\tif(indent)\r\n\t\t\tindent.style.paddingLeft = ((child_level + this.indent_offset) * Tree.INDENT ) + \"px\"; //inner padding\r\n\t\t\r\n\t\telement.dataset[\"level\"] = child_level;\r\n\r\n\t\t//under level nodes\r\n\t\tfor( var j = parent_index+1; j < this.root.childNodes.length; ++j )\r\n\t\t{\r\n\t\t\tvar new_childNode = this.root.childNodes[j];\r\n\t\t\tif( !new_childNode.classList || !new_childNode.classList.contains(\"ltreeitem\") )\r\n\t\t\t\tcontinue;\r\n\t\t\tvar current_level = parseInt( new_childNode.dataset[\"level\"] );\r\n\r\n\t\t\tif( current_level == child_level && offset_index)\r\n\t\t\t{\r\n\t\t\t\toffset_index--;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t//last position\r\n\t\t\tif( current_level < child_level || (offset_index === 0 && current_level === child_level) )\r\n\t\t\t{\r\n\t\t\t\tthis.root.insertBefore( element, new_childNode );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//ended\r\n\t\tthis.root.appendChild( element );\r\n\t}\r\n\r\n\r\n\tTree.prototype._isNodeChildrenVisible = function( id )\r\n\t{\r\n\t\tvar node = this.getItem( id );\r\n\t\tif(!node)\r\n\t\t\treturn false;\r\n\t\tif( node.classList.contains(\"hidden\") )\r\n\t\t\treturn false;\r\n\r\n\t\t//check listbox\r\n\t\tvar listbox = node.querySelector(\".listbox\");\r\n\t\tif(!listbox)\r\n\t\t\treturn true;\r\n\t\tif(listbox.getValue() == \"closed\")\r\n\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tTree.prototype._findElement = function( id )\r\n\t{\r\n\t\tif( !id || id.constructor !== String)\r\n\t\t\tthrow(\"findElement param must be string with item id\");\r\n\t\tfor(var i = 0; i < this.root.childNodes.length; ++i)\r\n\t\t{\r\n\t\t\tvar childNode = this.root.childNodes[i];\r\n\t\t\tif( !childNode.classList || !childNode.classList.contains(\"ltreeitem\") )\r\n\t\t\t\tcontinue;\r\n\t\t\tif( childNode.classList.contains(\"ltreeitem-\" + id) )\r\n\t\t\t\treturn childNode;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tTree.prototype._findElementIndex = function( id )\r\n\t{\r\n\t\tfor(var i = 0; i < this.root.childNodes.length; ++i)\r\n\t\t{\r\n\t\t\tvar childNode = this.root.childNodes[i];\r\n\t\t\tif( !childNode.classList || !childNode.classList.contains(\"ltreeitem\") )\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tif(typeof(id) === \"string\")\r\n\t\t\t{\r\n\t\t\t\tif(childNode.dataset[\"item_id\"] === id)\r\n\t\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t\telse if( childNode === id )\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tTree.prototype._findElementLastChildIndex = function( start_index )\r\n\t{\r\n\t\tif(start_index == -1)\r\n\t\t\treturn -1;\r\n\r\n\t\tvar level = parseInt( this.root.childNodes[ start_index ].dataset[\"level\"] );\r\n\r\n\t\tfor(var i = start_index+1; i < this.root.childNodes.length; ++i)\r\n\t\t{\r\n\t\t\tvar childNode = this.root.childNodes[i];\r\n\t\t\tif( !childNode.classList || !childNode.classList.contains(\"ltreeitem\") )\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tvar current_level = parseInt( childNode.dataset[\"level\"] );\r\n\t\t\tif( current_level == level )\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t//returns child elements (you can control levels)\r\n\tTree.prototype._findChildElements = function( id, only_direct )\r\n\t{\r\n\t\tvar parent_index = this._findElementIndex( id );\r\n\t\tif(parent_index == -1)\r\n\t\t\treturn;\r\n\r\n\t\tvar parent = this.root.childNodes[ parent_index ];\r\n\t\tvar parent_level = parseInt( parent.dataset[\"level\"] );\r\n\r\n\t\tvar result = [];\r\n\r\n\t\tfor(var i = parent_index + 1; i < this.root.childNodes.length; ++i)\r\n\t\t{\r\n\t\t\tvar childNode = this.root.childNodes[i];\r\n\t\t\tif( !childNode.classList || !childNode.classList.contains(\"ltreeitem\") )\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tvar current_level = parseInt( childNode.dataset[\"level\"] );\r\n\t\t\tif(only_direct && current_level > (parent_level + 1) )\r\n\t\t\t\tcontinue;\r\n\t\t\tif(current_level <= parent_level)\r\n\t\t\t\treturn result;\r\n\r\n\t\t\tresult.push( childNode );\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\tTree.prototype.createTreeItem = function( data, options, level )\r\n\t{\r\n\t\tif(data === null || data === undefined)\r\n\t\t{\r\n\t\t\tconsole.error(\"Tree item cannot be null\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\toptions = options || this.options;\r\n\r\n\t\tvar root = document.createElement(\"li\");\r\n\t\troot.className = \"ltreeitem\";\r\n\t\tvar that = this;\r\n\r\n\t\t//ids are not used because they could collide, classes instead\r\n\t\tif(data.id)\r\n\t\t{\r\n\t\t\tvar safe_id = data.id.replace(/\\s/g,\"_\");\r\n\t\t\troot.className += \" ltreeitem-\" + safe_id;\r\n\t\t\troot.dataset[\"item_id\"] = data.id;\r\n\t\t}\r\n\r\n\t\tif(data.dataset)\r\n\t\t\tfor(var i in data.dataset)\r\n\t\t\t\troot.dataset[i] = data.dataset[i];\r\n\r\n\t\tdata.DOM = root; //double link\r\n\t\troot.data = data;\r\n\r\n\t\tif(level !== undefined)\r\n\t\t{\r\n\t\t\troot.dataset[\"level\"] = level;\r\n\t\t\troot.classList.add(\"ltree-level-\" + level);\r\n\t\t}\r\n\r\n\t\tvar title_element = document.createElement(\"div\");\r\n\t\ttitle_element.className = \"ltreeitemtitle\";\r\n\t\tif(data.className)\r\n\t\t\ttitle_element.className += \" \" + data.className;\r\n\r\n\t\ttitle_element.innerHTML = \"<span class='precontent'></span><span class='indentblock'></span><span class='collapsebox'></span><span class='incontent'></span><span class='postcontent'></span>\";\r\n\r\n\t\tvar content = data.content || data.id || \"\";\r\n\t\ttitle_element.querySelector(\".incontent\").innerHTML = content;\r\n\r\n\t\tif(data.precontent)\r\n\t\t\ttitle_element.querySelector(\".precontent\").innerHTML = data.precontent;\r\n\r\n\t\tif(data.postcontent)\r\n\t\t\ttitle_element.querySelector(\".postcontent\").innerHTML = data.postcontent;\r\n\r\n\t\tif(data.dataset)\r\n\t\t\tfor(var i in data.dataset)\r\n\t\t\t\troot.dataset[i] = data.dataset[i];\r\n\r\n\t\troot.appendChild( title_element );\r\n\t\troot.title_element = title_element;\r\n\r\n\t\tif(data.visible === false)\r\n\t\t\troot.style.display = \"none\";\r\n\r\n\t\t//var row = root.querySelector(\".ltreeitemtitle .incontent\");\r\n\t\tvar row = root;\r\n\t\trow.addEventListener(\"click\", onNodeSelected );\r\n\t\trow.addEventListener(\"dblclick\",onNodeDblClicked );\r\n\t\trow.addEventListener(\"contextmenu\", function(e) { \r\n\t\t\tvar item = this;\r\n\t\t\te.preventDefault(); \r\n\t\t\te.stopPropagation();\r\n\r\n\t\t\tif(e.button != 2) //right button\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif(that.onItemContextMenu)\r\n\t\t\t\treturn that.onItemContextMenu(e, { item: item, data: item.data} );\r\n\r\n\t\t\treturn false;\r\n\t\t});\r\n\r\n\t\tfunction onNodeSelected(e)\r\n\t\t{\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\r\n\t\t\t//var title = this.parentNode;\r\n\t\t\t//var item = title.parentNode;\r\n\t\t\tvar node = this;\r\n\t\t\tvar title = node.title_element;\r\n\r\n\t\t\tif(title._editing) \r\n\t\t\t\treturn;\r\n\r\n\t\t\tif(e.ctrlKey && that.options.allow_multiselection)\r\n\t\t\t{\r\n\t\t\t\t//check if selected\r\n\t\t\t\tif( that.isNodeSelected( node ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tnode.classList.remove(\"selected\");\r\n\t\t\t\t\tLiteGUI.trigger(that, \"item_remove_from_selection\", { item: node, data: node.data} );\r\n\t\t\t\t\tLiteGUI.trigger(that.root, \"item_remove_from_selection\", { item: node, data: node.data} ); //LEGACY\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//mark as selected\r\n\t\t\t\tthat.markAsSelected( node, true );\r\n\t\t\t\tLiteGUI.trigger(that, \"item_add_to_selection\", { item: node, data: node.data} );\r\n\t\t\t\tLiteGUI.trigger(that.root, \"item_add_to_selection\", { item: node, data: node.data} ); //LEGACY\r\n\t\t\t\tvar r = false;\r\n\t\t\t\tif(data.callback) \r\n\t\t\t\t\tr = data.callback.call(that,node);\r\n\r\n\t\t\t\tif(!r && that.onItemAddToSelection)\r\n\t\t\t\t\tthat.onItemAddToSelection(node.data, node);\r\n\t\t\t}\r\n\t\t\tif(e.shiftKey && that.options.allow_multiselection)\r\n\t\t\t{\r\n\t\t\t\t//select from current selection till here\r\n\t\t\t\t//current\r\n\t\t\t\tvar last_item = that.getSelectedItem();\r\n\t\t\t\tif(!last_item)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tif(last_item === node)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tvar nodeList = Array.prototype.slice.call( last_item.parentNode.children );\r\n\t\t\t\tvar last_index = nodeList.indexOf( last_item );\r\n\t\t\t\tvar current_index = nodeList.indexOf( node );\r\n\r\n\t\t\t\tvar items = current_index > last_index ? nodeList.slice( last_index, current_index ) : nodeList.slice( current_index, last_index );\r\n\t\t\t\tfor( var i = 0; i < items.length; ++i )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar item = items[i];\r\n\t\t\t\t\t//console.log(item);\r\n\t\t\t\t\t//mark as selected\r\n\t\t\t\t\tthat.markAsSelected( item, true );\r\n\t\t\t\t\tLiteGUI.trigger( that, \"item_add_to_selection\", { item: item, data: item.data } );\r\n\t\t\t\t\tLiteGUI.trigger( that.root, \"item_add_to_selection\", { item: item, data: item.data } ); //LEGACY\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//mark as selected\r\n\t\t\t\tthat.markAsSelected( node );\r\n\r\n\t\t\t\tthat._skip_scroll = true; //avoid scrolling while user clicks something\r\n\t\t\t\tLiteGUI.trigger( that, \"item_selected\", { item: node, data: node.data } );\r\n\t\t\t\tLiteGUI.trigger( that.root, \"item_selected\", { item: node, data: node.data } ); //LEGACY\r\n\t\t\t\tvar r = false;\r\n\t\t\t\tif(data.callback) \r\n\t\t\t\t\tr = data.callback.call(that,node);\r\n\r\n\t\t\t\tif(!r && that.onItemSelected)\r\n\t\t\t\t\tthat.onItemSelected(node.data, node);\r\n\t\t\t\tthat._skip_scroll = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction onNodeDblClicked(e)\r\n\t\t{\r\n\t\t\tvar node = this; //this.parentNode;\r\n\t\t\tvar title = node.title_element.querySelector(\".incontent\");\r\n\r\n\t\t\tLiteGUI.trigger( that, \"item_dblclicked\", node );\r\n\t\t\tLiteGUI.trigger( that.root, \"item_dblclicked\", node ); //LEGACY\r\n\r\n\t\t\tif(!title._editing && that.options.allow_rename)\r\n\t\t\t{\r\n\t\t\t\ttitle._editing = true;\r\n\t\t\t\ttitle._old_name = title.innerHTML;\r\n\t\t\t\tvar that2 = title;\r\n\t\t\t\ttitle.innerHTML = \"<input type='text' value='\" + title.innerHTML + \"' />\";\r\n\t\t\t\tvar input = title.querySelector(\"input\");\r\n\r\n\t\t\t\t//loose focus when renaming\r\n\t\t\t\tinput.addEventListener(\"blur\",function(e) { \r\n\t\t\t\t\tvar new_name = e.target.value;\r\n\t\t\t\t\tsetTimeout(function() { that2.innerHTML = new_name; },1); //bug fix, if I destroy input inside the event, it produce a NotFoundError\r\n\t\t\t\t\t//item.node_name = new_name;\r\n\t\t\t\t\tdelete that2._editing;\r\n\t\t\t\t\tLiteGUI.trigger( that.root, \"item_renamed\", { old_name: that2._old_name, new_name: new_name, item: node, data: node.data } );\r\n\t\t\t\t\tdelete that2._old_name;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//finishes renaming\r\n\t\t\t\tinput.addEventListener(\"keydown\", function(e) {\r\n\t\t\t\t\tif(e.keyCode != 13)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tthis.blur();\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//set on focus\r\n\t\t\t\tinput.focus();\r\n\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t}\r\n\r\n\t\t//dragging element on tree\r\n\t\tvar draggable_element = title_element;\r\n\t\tif(this.options.allow_drag)\r\n\t\t{\r\n\t\t\tdraggable_element.draggable = true;\r\n\r\n\t\t\t//starts dragging this element\r\n\t\t\tdraggable_element.addEventListener(\"dragstart\", function(ev) {\r\n\t\t\t\t//this.removeEventListener(\"dragover\", on_drag_over ); //avoid being drag on top of himself\r\n\t\t\t\t//ev.dataTransfer.setData(\"node-id\", this.parentNode.id);\r\n\t\t\t\tev.dataTransfer.setData(\"item_id\", this.parentNode.dataset[\"item_id\"]);\r\n\t\t\t\tif(!data.onDragData)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tvar drag_data =\tdata.onDragData();\r\n\t\t\t\tif(drag_data)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(var i in drag_data)\r\n\t\t\t\t\t\tev.dataTransfer.setData(i,drag_data[i]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar count = 0;\r\n\r\n\t\t//something being dragged entered\r\n\t\tdraggable_element.addEventListener(\"dragenter\", function (ev)\r\n\t\t{\r\n\t\t\tev.preventDefault();\r\n\t\t\tif(data.skipdrag)\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(count == 0)\r\n\t\t\t\ttitle_element.classList.add(\"dragover\");\r\n\t\t\tcount++;\r\n\t\t});\r\n\r\n\t\tdraggable_element.addEventListener(\"dragleave\", function (ev)\r\n\t\t{\r\n\t\t\tev.preventDefault();\r\n\t\t\t//console.log(data.id);\r\n\t\t\tcount--;\r\n\t\t\tif(count == 0)\r\n\t\t\t\ttitle_element.classList.remove(\"dragover\");\r\n\t\t\t//if(ev.srcElement == this) return;\r\n\t\t});\r\n\r\n\t\t//test if allows to drag stuff on top?\r\n\t\tdraggable_element.addEventListener(\"dragover\", on_drag_over );\r\n\t\tfunction on_drag_over(ev)\r\n\t\t{\r\n\t\t\tev.preventDefault();\r\n\t\t}\r\n\r\n\t\tdraggable_element.addEventListener(\"drop\", function (ev)\r\n\t\t{\r\n\t\t\ttitle_element.classList.remove(\"dragover\");\r\n\t\t\tev.preventDefault();\r\n\t\t\tif(data.skipdrag)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tvar item_id = ev.dataTransfer.getData(\"item_id\");\r\n\r\n\t\t\t//var data = ev.dataTransfer.getData(\"Text\");\r\n\t\t\tif(!item_id)\r\n\t\t\t{\r\n\t\t\t\tLiteGUI.trigger( that.root, \"drop_on_item\", { item: this, event: ev });\r\n\t\t\t\tif( that.onDropItem )\r\n\t\t\t\t\tthat.onDropItem( ev, this.parentNode.data );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//try\r\n\t\t\t{\r\n\t\t\t\tvar parent_id = this.parentNode.dataset[\"item_id\"];\r\n\r\n\t\t\t\tif( !that.onMoveItem || (that.onMoveItem && that.onMoveItem( that.getItem( item_id ), that.getItem( parent_id ) ) != false))\r\n\t\t\t\t{\r\n\t\t\t\t\tif( that.moveItem( item_id, parent_id ) )\r\n\t\t\t\t\t\tLiteGUI.trigger( that.root, \"item_moved\", { item: that.getItem( item_id ), parent_item: that.getItem( parent_id ) } );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\tcatch (err)\r\n\t\t\t{\r\n\t\t\t\tconsole.error(\"Error: \" + err );\r\n\t\t\t}\r\n\t\t\t*/\r\n\r\n\t\t\tif( that.onDropItem )\r\n\t\t\t\tthat.onDropItem( ev, this.parentNode.data );\r\n\t\t});\r\n\r\n\t\treturn root;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* remove from the tree the items that do not have a name that matches the string\r\n\t* @method filterByName\r\n\t* @param {string} name\r\n\t*/\r\n\tTree.prototype.filterByName = function(name)\r\n\t{\r\n\t\tfor(var i = 0; i < this.root.childNodes.length; ++i)\r\n\t\t{\r\n\t\t\tvar childNode = this.root.childNodes[i]; //ltreeitem\r\n\t\t\tif( !childNode.classList || !childNode.classList.contains(\"ltreeitem\") )\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tvar content = childNode.querySelector(\".incontent\");\r\n\t\t\tif(!content)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tvar str = content.innerHTML.toLowerCase();\r\n\r\n\t\t\tif(!name || str.indexOf( name.toLowerCase() ) != -1)\r\n\t\t\t{\r\n\t\t\t\tif( childNode.data && childNode.data.visible !== false )\r\n\t\t\t\t\tchildNode.classList.remove(\"filtered\");\r\n\t\t\t\tvar indent = childNode.querySelector(\".indentblock\");\r\n\t\t\t\tif(indent)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(name)\r\n\t\t\t\t\t\tindent.style.paddingLeft = 0;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tindent.style.paddingLeft = paddingLeft = ( (parseInt(childNode.dataset[\"level\"]) + this.indent_offset) * Tree.INDENT) + \"px\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tchildNode.classList.add(\"filtered\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t* remove from the tree the items that do not have a name that matches the string\r\n\t* @method filterByName\r\n\t* @param {string} name\r\n\t*/\r\n\tTree.prototype.filterByRule = function( callback_to_filter, param )\r\n\t{\r\n\t\tif(!callback_to_filter)\r\n\t\t\tthrow(\"filterByRule requires a callback\");\r\n\t\tfor(var i = 0; i < this.root.childNodes.length; ++i)\r\n\t\t{\r\n\t\t\tvar childNode = this.root.childNodes[i]; //ltreeitem\r\n\t\t\tif( !childNode.classList || !childNode.classList.contains(\"ltreeitem\") )\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tvar content = childNode.querySelector(\".incontent\");\r\n\t\t\tif(!content)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tif( callback_to_filter( childNode.data, content, param ) )\r\n\t\t\t{\r\n\t\t\t\tif( childNode.data && childNode.data.visible !== false )\r\n\t\t\t\t\tchildNode.classList.remove(\"filtered\");\r\n\t\t\t\tvar indent = childNode.querySelector(\".indentblock\");\r\n\t\t\t\tif(indent)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(name)\r\n\t\t\t\t\t\tindent.style.paddingLeft = 0;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tindent.style.paddingLeft = paddingLeft = ( (parseInt(childNode.dataset[\"level\"]) + this.indent_offset) * LiteGUI.Tree.INDENT) + \"px\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tchildNode.classList.add(\"filtered\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t* get the item with that id, returns the HTML element\r\n\t* @method getItem\r\n\t* @param {string} id\r\n\t* @return {Object}\r\n\t*/\r\n\tTree.prototype.getItem = function( id )\r\n\t{\r\n\t\tif(!id)\r\n\t\t\treturn null;\r\n\r\n\t\tif( id.classList ) //if it is already a node\r\n\t\t\treturn id;\r\n\r\n\t\tfor(var i = 0; i < this.root.childNodes.length; ++i)\r\n\t\t{\r\n\t\t\tvar childNode = this.root.childNodes[i];\r\n\t\t\tif( !childNode.classList || !childNode.classList.contains(\"ltreeitem\") )\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tif(childNode.dataset[\"item_id\"] === id)\r\n\t\t\t\treturn childNode;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t\t/*\r\n\t\tvar safe_id = id.replace(/\\s/g,\"_\");\r\n\t\tvar node = this.root.querySelector(\".ltreeitem-\"+safe_id);\r\n\t\tif(!node) \r\n\t\t\treturn null;\r\n\t\tif( !node.classList.contains(\"ltreeitem\") )\r\n\t\t\tthrow(\"this node is not a tree item\");\r\n\t\treturn node;\r\n\t\t*/\r\n\t}\r\n\r\n\t/**\r\n\t* in case an item is collapsed, it expands it to show children\r\n\t* @method expandItem\r\n\t* @param {string} id\r\n\t*/\r\n\tTree.prototype.expandItem = function(id, parents)\r\n\t{\r\n\t\tvar item = this.getItem(id);\r\n\t\tif(!item)\r\n\t\t\treturn;\r\n\r\n\t\tif(!item.listbox)\r\n\t\t\treturn;\r\n\r\n\t\titem.listbox.setValue(true); //this propagates changes\r\n\r\n\t\tif(!parents)\r\n\t\t\treturn;\r\n\r\n\t\tvar parent = this.getParent( item );\r\n\t\tif(parent)\r\n\t\t\tthis.expandItem(parent,parents);\r\n\t}\r\n\r\n\t/**\r\n\t* in case an item is expanded, it collapses it to hide children\r\n\t* @method collapseItem\r\n\t* @param {string} id\r\n\t*/\r\n\tTree.prototype.collapseItem = function(id)\r\n\t{\r\n\t\tvar item = this.getItem(id);\r\n\t\tif(!item)\r\n\t\t\treturn;\r\n\r\n\t\tif(!item.listbox)\r\n\t\t\treturn;\r\n\r\n\t\tlistbox.setValue(false);  //this propagates changes\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* Tells you if the item its out of the view due to the scrolling\r\n\t* @method isInsideArea\r\n\t* @param {string} id\r\n\t*/\r\n\tTree.prototype.isInsideArea = function( id )\r\n\t{\r\n\t\tvar item = id.constructor === String ? this.getItem(id) : id;\r\n\t\tif(!item)\r\n\t\t\treturn false;\r\n\r\n\t\tvar rects = this.root.getClientRects();\r\n\t\tif(!rects.length)\r\n\t\t\treturn false;\r\n\t\tvar r = rects[0];\r\n\t\tvar h = r.height;\r\n\t\tvar y = item.offsetTop;\r\n\r\n\t\tif( this.root.scrollTop < y && y < (this.root.scrollTop + h) )\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t* Scrolls to center this item\r\n\t* @method scrollToItem\r\n\t* @param {string} id\r\n\t*/\r\n\tTree.prototype.scrollToItem = function(id)\r\n\t{\r\n\t\tvar item = id.constructor === String ? this.getItem(id) : id;\r\n\t\tif(!item)\r\n\t\t\treturn;\r\n\r\n\t\tvar container = this.root.parentNode;\r\n\r\n\t\tif(!container)\r\n\t\t\treturn;\r\n\r\n\t\tvar rect = container.getBoundingClientRect();\r\n\t\tif(!rect)\r\n\t\t\treturn;\r\n\t\tvar h = rect.height;\r\n\t\tvar x = ( parseInt( item.dataset[\"level\"] ) + this.indent_offset) * Tree.INDENT + 50;\r\n\r\n\t\tcontainer.scrollTop = item.offsetTop - (h * 0.5)|0;\r\n\t\tif( rect.width * 0.75 < x )\r\n\t\t\tcontainer.scrollLeft = x;\r\n\t\telse\r\n\t\t\tcontainer.scrollLeft = 0;\r\n\t}\r\n\r\n\t/**\r\n\t* mark item as selected\r\n\t* @method setSelectedItem\r\n\t* @param {string} id\r\n\t*/\r\n\tTree.prototype.setSelectedItem = function( id, scroll, send_event )\r\n\t{\r\n\t\tif(!id)\r\n\t\t{\r\n\t\t\t//clear selection\r\n\t\t\tthis.unmarkAllAsSelected();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar node = this.getItem(id);\r\n\t\tif(!node) //not found\r\n\t\t\treturn null;\r\n\r\n\t\t//already selected\r\n\t\tif( node.classList.contains(\"selected\") ) \r\n\t\t\treturn;\r\n\r\n\t\tthis.markAsSelected(node);\r\n\t\tif( scroll && !this._skip_scroll )\r\n\t\t\tthis.scrollToItem(node);\r\n\r\n\t\t//expand parents\r\n\t\tthis.expandItem( node, true );\r\n\r\n\t\tif(send_event)\r\n\t\t\tLiteGUI.trigger( node, \"click\" );\r\n\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t* adds item to selection (multiple selection)\r\n\t* @method addItemToSelection\r\n\t* @param {string} id\r\n\t*/\r\n\tTree.prototype.addItemToSelection = function( id )\r\n\t{\r\n\t\tif(!id)\r\n\t\t\treturn;\r\n\r\n\t\tvar node = this.getItem(id);\r\n\t\tif(!node) //not found\r\n\t\t\treturn null;\r\n\r\n\t\tthis.markAsSelected(node, true);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t* remove item from selection (multiple selection)\r\n\t* @method removeItemFromSelection\r\n\t* @param {string} id\r\n\t*/\r\n\tTree.prototype.removeItemFromSelection = function( id )\r\n\t{\r\n\t\tif(!id)\r\n\t\t\treturn;\r\n\t\tvar node = this.getItem(id);\r\n\t\tif(!node) //not found\r\n\t\t\treturn null;\r\n\t\tnode.classList.remove(\"selected\");\r\n\t}\r\n\r\n\t/**\r\n\t* returns the first selected item (its HTML element)\r\n\t* @method getSelectedItem\r\n\t* @return {HTML}\r\n\t*/\r\n\tTree.prototype.getSelectedItem = function()\r\n\t{\r\n\t\treturn this.root.querySelector(\".ltreeitem.selected\");\r\n\t}\r\n\r\n\t/**\r\n\t* returns an array with the selected items (its HTML elements)\r\n\t* @method getSelectedItems\r\n\t* @return {HTML}\r\n\t*/\r\n\tTree.prototype.getSelectedItems = function()\r\n\t{\r\n\t\treturn this.root.querySelectorAll(\".ltreeitem.selected\");\r\n\t}\r\n\r\n\t/**\r\n\t* returns if an item is selected\r\n\t* @method isItemSelected\r\n\t* @param {string} id\r\n\t* @return {bool}\r\n\t*/\r\n\tTree.prototype.isItemSelected = function(id)\r\n\t{\r\n\t\tvar node = this.getItem( id );\r\n\t\tif(!node)\r\n\t\t\treturn false;\r\n\t\treturn this.isNodeSelected(node);\r\n\t}\r\n\r\n\t/**\r\n\t* returns the children of an item\r\n\t* @method getChildren\r\n\t* @param {string} id could be string or node directly\r\n\t* @param {bool} [only_direct=false] to get only direct children\r\n\t* @return {Array}\r\n\t*/\r\n\tTree.prototype.getChildren = function(id, only_direct )\r\n\t{\r\n\t\tif( id && id.constructor !== String && id.dataset )\r\n\t\t\tid = id.dataset[\"item_id\"];\r\n\t\treturn this._findChildElements( id, only_direct );\r\n\t}\r\n\r\n\t/**\r\n\t* returns the parent of a item\r\n\t* @method getParent\r\n\t* @param {string} id\r\n\t* @return {HTML}\r\n\t*/\r\n\tTree.prototype.getParent = function(id_or_node)\r\n\t{\r\n\t\tvar element = this.getItem( id_or_node );\r\n\t\tif(element)\r\n\t\t\treturn this.getItem( element.parent_id );\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t* returns an array with all the ancestors\r\n\t* @method getAncestors\r\n\t* @param {string} id\r\n\t* @return {Array}\r\n\t*/\r\n\tTree.prototype.getAncestors = function( id_or_node, result )\r\n\t{\r\n\t\tresult = result || [];\r\n\t\tvar element = this.getItem( id_or_node );\r\n\t\tif(element)\r\n\t\t{\r\n\t\t\tresult.push( element );\r\n\t\t\treturn this.getAncestors( element.parent_id, result );\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t* returns an array with all the ancestors\r\n\t* @method getAncestors\r\n\t* @param {string} id\r\n\t* @return {Array}\r\n\t*/\r\n\tTree.prototype.isAncestor = function( child, node )\r\n\t{\r\n\t\tvar element = this.getItem( child );\r\n\t\tif(!element)\r\n\t\t\treturn false;\r\n\t\tvar dest = this.getItem( node );\r\n\t\tvar parent = this.getItem( element.parent_id );\r\n\t\tif(!parent)\r\n\t\t\treturn false;\r\n\t\tif(parent == dest)\r\n\t\t\treturn true;\r\n\t\treturn this.isAncestor( parent, node );\r\n\t}\r\n\r\n\t/**\r\n\t* move item with id to be child of parent_id\r\n\t* @method moveItem\r\n\t* @param {string} id\r\n\t* @param {string} parent_id\r\n\t* @return {bool}\r\n\t*/\r\n\tTree.prototype.moveItem = function( id, parent_id )\r\n\t{\r\n\t\tif(id === parent_id)\r\n\t\t\treturn false;\r\n\r\n\t\tvar node = this.getItem( id );\r\n\t\tvar parent = this.getItem( parent_id );\r\n\r\n\t\tif( this.isAncestor( parent, node ) )\r\n\t\t\treturn false;\r\n\r\n\t\tvar parent_index = this._findElementIndex( parent );\r\n\t\tvar parent_level = parseInt( parent.dataset[\"level\"] );\r\n\t\tvar old_parent = this.getParent( node );\r\n\t\tif(!old_parent)\r\n\t\t{\r\n\t\t\tconsole.error(\"node parent not found by id, maybe id has changed\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvar old_parent_level = parseInt( old_parent.dataset[\"level\"] );\r\n\t\tvar level_offset = parent_level - old_parent_level;\r\n\r\n\t\tif(!parent || !node)\r\n\t\t\treturn false;\r\n\r\n\t\tif(parent == old_parent)\r\n\t\t\treturn false;\r\n\r\n\t\t//replace parent info\r\n\t\tnode.parent_id = parent_id;\r\n\r\n\t\t//get all children and subchildren and reinsert them in the new level\r\n\t\tvar children = this.getChildren( node );\r\n\t\tif(children)\r\n\t\t{\r\n\t\t\tchildren.unshift( node ); //add the node at the beginning\r\n\r\n\t\t\t//remove all children\r\n\t\t\tfor(var i = 0; i < children.length; i++)\r\n\t\t\t\tchildren[i].parentNode.removeChild( children[i] );\r\n\r\n\t\t\t//update levels\r\n\t\t\tfor(var i = 0; i < children.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar child = children[i];\r\n\t\t\t\tvar new_level = parseInt(child.dataset[\"level\"]) + level_offset;\r\n\t\t\t\tchild.dataset[\"level\"] = new_level;\r\n\t\t\t}\r\n\r\n\t\t\t//reinsert\r\n\t\t\tparent_index = this._findElementIndex( parent ); //update parent index\r\n\t\t\tvar last_index = this._findElementLastChildIndex( parent_index );\r\n\t\t\tif(last_index == -1)\r\n\t\t\t\tlast_index = 0;\r\n\t\t\tfor(var i = 0; i < children.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar child = children[i];\r\n\t\t\t\tthis._insertInside( child, parent_index, last_index + i - 1, parseInt( child.dataset[\"level\"] ) );\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//update collapse button\r\n\t\tthis._updateListBox( parent );\r\n\t\tif(old_parent)\r\n\t\t\tthis._updateListBox( old_parent );\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* remove item with given id\r\n\t* @method removeItem\r\n\t* @param {string} id\r\n\t* @return {bool}\r\n\t*/\r\n\tTree.prototype.removeItem = function( id_or_node, remove_children )\r\n\t{\r\n\t\tvar node = id_or_node;\r\n\t\tif(typeof(id_or_node) == \"string\")\r\n\t\t\tnode = this.getItem( id_or_node );\r\n\t\tif(!node)\r\n\t\t\treturn false;\r\n\r\n\t\t//get parent\r\n\t\tvar parent = this.getParent( node );\r\n\r\n\t\t//get all descendants\r\n\t\tvar child_nodes = null;\r\n\t\tif(remove_children)\r\n\t\t\tchild_nodes = this.getChildren( node );\r\n\r\n\t\t//remove html element\r\n\t\tthis.root.removeChild( node );\r\n\r\n\t\t//remove all children\r\n\t\tif( child_nodes )\r\n\t\t{\r\n\t\t\tfor( var i = 0; i < child_nodes.length; i++ )\r\n\t\t\t\tthis.root.removeChild( child_nodes[i] );\r\n\t\t}\r\n\r\n\t\t//update parent collapse button\r\n\t\tif(parent)\r\n\t\t\tthis._updateListBox( parent );\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* update a given item with new data\r\n\t* @method updateItem\r\n\t* @param {string} id\r\n\t* @param {object} data\r\n\t*/\r\n\tTree.prototype.updateItem = function(id, data)\r\n\t{\r\n\t\tvar node = this.getItem(id);\r\n\t\tif(!node)\r\n\t\t\treturn false;\r\n\r\n\t\tnode.data = data;\r\n\t\tif(data.id)\r\n\t\t\tnode.id = data.id; //this updateItemId ?\r\n\t\tif(data.content)\r\n\t\t{\r\n\t\t\t//node.title_element.innerHTML = \"<span class='precontent'></span><span class='incontent'>\" +  + \"</span><span class='postcontent'></span>\";\r\n\t\t\tvar incontent = node.title_element.querySelector(\".incontent\");\r\n\t\t\tincontent.innerHTML = data.content;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* update a given item id and the link with its children\r\n\t* @method updateItemId\r\n\t* @param {string} old_id\r\n\t* @param {string} new_id\r\n\t*/\r\n\tTree.prototype.updateItemId = function(old_id, new_id)\r\n\t{\r\n\t\tvar node = this.getItem(old_id);\r\n\t\tif(!node)\r\n\t\t\treturn false;\r\n\r\n\t\tvar children = this.getChildren( old_id, true );\r\n\t\tnode.id = new_id;\r\n\r\n\t\tfor(var i = 0; i < children.length; ++i)\r\n\t\t{\r\n\t\t\tvar child = children[i];\r\n\t\t\tchild.parent_id = new_id;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* clears all the items\r\n\t* @method clear\r\n\t* @param {bool} keep_root if you want to keep the root item\r\n\t*/\r\n\tTree.prototype.clear = function(keep_root)\r\n\t{\r\n\t\tif(!keep_root)\r\n\t\t{\r\n\t\t\tthis.root.innerHTML = \"\";\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar items = this.root.querySelectorAll(\".ltreeitem\");\r\n\t\tfor(var i = 1; i < items.length; i++)\r\n\t\t{\r\n\t\t\tvar item = items[i];\r\n\t\t\tthis.root.removeChild( item );\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tTree.prototype.getNodeByIndex = function(index)\r\n\t{\r\n\t\tvar items = this.root.querySelectorAll(\".ltreeitem\");\r\n\t\treturn items[index];\r\n\t}\r\n\r\n\t//private ********************************\r\n\r\n\tTree.prototype.unmarkAllAsSelected = function()\r\n\t{\r\n\t\tthis.root.classList.remove(\"selected\");\r\n\t\tvar selected_array = this.root.querySelectorAll(\".ltreeitem.selected\");\r\n\t\tif(selected_array)\r\n\t\t{\r\n\t\t\tfor(var i = 0; i < selected_array.length; i++)\r\n\t\t\t\tselected_array[i].classList.remove(\"selected\");\r\n\t\t}\r\n\t\tvar semiselected = this.root.querySelectorAll(\".ltreeitem.semiselected\");\r\n\t\tfor(var i = 0; i < semiselected.length; i++)\r\n\t\t\tsemiselected[i].classList.remove(\"semiselected\");\r\n\t}\r\n\r\n\tTree.prototype.isNodeSelected = function( node )\r\n\t{\r\n\t\t//already selected\r\n\t\tif( node.classList.contains(\"selected\") ) \r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tTree.prototype.markAsSelected = function( node, add_to_existing_selection )\r\n\t{\r\n\t\t//already selected\r\n\t\tif( node.classList.contains(\"selected\") ) \r\n\t\t\treturn;\r\n\r\n\t\t//clear old selection\r\n\t\tif(!add_to_existing_selection)\r\n\t\t\tthis.unmarkAllAsSelected();\r\n\r\n\t\t//mark as selected (it was node.title_element?)\r\n\t\tnode.classList.add(\"selected\");\r\n\r\n\t\t//go up and semiselect\r\n\t\tvar parent = this.getParent( node );\r\n\t\tvar visited = [];\r\n\t\twhile(parent && visited.indexOf(parent) == -1)\r\n\t\t{\r\n\t\t\tparent.classList.add(\"semiselected\");\r\n\t\t\tvisited.push( parent );\r\n\t\t\tparent = this.getParent( parent );\r\n\t\t}\r\n\t\t/*\r\n\t\tvar parent = node.parentNode.parentNode; //two elements per level\r\n\t\twhile(parent && parent.classList.contains(\"ltreeitem\"))\r\n\t\t{\r\n\t\t\tparent.title_element.classList.add(\"semiselected\");\r\n\t\t\tparent = parent.parentNode.parentNode;\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\t//updates the widget to collapse\r\n\tTree.prototype._updateListBox = function( node, options, current_level )\r\n\t{\r\n\t\tif(!node)\r\n\t\t\treturn;\r\n\r\n\t\tvar that = this;\r\n\r\n\t\tif(!node.listbox)\r\n\t\t{\r\n\t\t\tvar pre = node.title_element.querySelector(\".collapsebox\");\r\n\t\t\tvar box = LiteGUI.createLitebox(true, function(e) { \r\n\t\t\t\tthat.onClickBox(e, node);\r\n\t\t\t\tLiteGUI.trigger( that.root, \"item_collapse_change\", { item: node, data: box.getValue() } );\r\n\t\t\t});\r\n\t\t\tbox.stopPropagation = true;\r\n\t\t\tbox.setEmpty(true);\r\n\t\t\tpre.appendChild(box);\r\n\t\t\tnode.listbox = box;\r\n\t\t}\r\n\r\n\t\tif( (options && options.collapsed) || current_level >= this.collapsed_depth )\r\n\t\t\tnode.listbox.collapse();\r\n\r\n\t\tvar child_elements = this.getChildren( node.dataset[\"item_id\"] );\r\n\t\tif(!child_elements)\r\n\t\t\treturn; //null\r\n\r\n\t\tif(child_elements.length)\r\n\t\t\tnode.listbox.setEmpty(false);\r\n\t\telse\r\n\t\t\tnode.listbox.setEmpty(true);\r\n\t}\r\n\r\n\tTree.prototype.onClickBox = function(e, node)\r\n\t{\r\n\t\tvar children = this.getChildren( node );\r\n\r\n\t\tif(!children)\r\n\t\t\treturn;\r\n\r\n\t\t//update children visibility\r\n\t\tfor(var i = 0; i < children.length; ++i)\r\n\t\t{\r\n\t\t\tvar child = children[i];\r\n\t\t\t\r\n\t\t\tvar child_parent = this.getParent( child );\r\n\t\t\tvar visible = true;\r\n\t\t\tif( child_parent )\r\n\t\t\t\tvisible = this._isNodeChildrenVisible(child_parent);\r\n\t\t\tif(visible)\r\n\t\t\t\tchild.classList.remove(\"hidden\");\r\n\t\t\telse\r\n\t\t\t\tchild.classList.add(\"hidden\");\r\n\t\t}\r\n\t}\r\n\r\n\treturn LiteGUI.Tree = Tree;\r\n});"]}