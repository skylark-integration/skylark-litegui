{
    "project": {},
    "files": {
        "../src/area.js": {
            "name": "../src/area.js",
            "modules": {},
            "classes": {
                "Area": 1,
                "Split": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/core.js": {
            "name": "../src/core.js",
            "modules": {},
            "classes": {
                "LiteGUI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/dialog.js": {
            "name": "../src/dialog.js",
            "modules": {},
            "classes": {
                "Dialog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/dragger.js": {
            "name": "../src/dragger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/inspector.js": {
            "name": "../src/inspector.js",
            "modules": {},
            "classes": {
                "Inspector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/menubar.js": {
            "name": "../src/menubar.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/panel.js": {
            "name": "../src/panel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/tabs.js": {
            "name": "../src/tabs.js",
            "modules": {},
            "classes": {
                "Tabs": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/tree.js": {
            "name": "../src/tree.js",
            "modules": {},
            "classes": {
                "Tree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../src/tree_old.js": {
            "name": "../src/tree_old.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../src/widgets.js": {
            "name": "../src/widgets.js",
            "modules": {},
            "classes": {
                "SearchBox": 1,
                "ContextMenu": 1,
                "List": 1,
                "Slider": 1,
                "LineEditor": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Area": {
            "name": "Area",
            "shortname": "Area",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/area.js",
            "line": 6,
            "description": "Areas can be split several times horizontally or vertically to fit different colums or rows",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Split": {
            "name": "Split",
            "shortname": "Split",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/area.js",
            "line": 552,
            "description": "Split",
            "is_constructor": 1
        },
        "LiteGUI": {
            "name": "LiteGUI",
            "shortname": "LiteGUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/core.js",
            "line": 2,
            "description": "Core namespace of LiteGUI library, it holds some useful functions",
            "is_constructor": 1
        },
        "Dialog": {
            "name": "Dialog",
            "shortname": "Dialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/dialog.js",
            "line": 3,
            "description": "Dialog",
            "params": [
                {
                    "name": "options",
                    "description": "useful options are { title, width, height, closable, on_close, scroll }",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "Inspector": {
            "name": "Inspector",
            "shortname": "Inspector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/inspector.js",
            "line": 1,
            "description": "Inspector allows to create a list of widgets easily, it also provides methods to create the widgets automatically.<br/>\nEvery widget is created calling the function add followed by the widget name, p.e. addSlider or addVector3 or addNumber.<br/>\nWidgets always receive three parameters:<br/>\n- name: String that defines the name at that it will be shown in the left side of the widget.<br/>\n- value: the value that will be displayed in the widget.<br/>\n- options: Object containing all the values .<br/>",
            "params": [
                {
                    "name": "options",
                    "description": "object with a set of options { <br/>\n\twidth: total width <br/>\n\theight: total height <br/>\n\twidgets_width: width of every widget (used mostly in horizontal inspectors) <br/>\n\tname_width: width of the name part of widgets <br/>\n\tfull: set to true if you want the inspector to use all the parent width and height <br/>\n\twidgets_per_row: number of widgets per row, default is 1 but you can change it if you want to pack several widgets in a row (useful for small widgets like checkboxes) <br/>\n\tone_line: widgets are place one next to the other horizontaly <br/>\n\tonchange: callback to call when something changes <br/>\n  } <br/>\n\n\tDependencies: \n\t\t- jscolor.js",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "Tabs": {
            "name": "Tabs",
            "shortname": "Tabs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/tabs.js",
            "line": 5,
            "description": "Widget that contains several tabs and their content\nOptions:\n- mode: \"vertical\",\"horizontal\"\n- size\n- width,height\n- autoswitch: allow autoswitch (switch when mouse over)",
            "is_constructor": 1
        },
        "Tree": {
            "name": "Tree",
            "shortname": "Tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/tree.js",
            "line": 5,
            "description": "To create interactive trees (useful for folders or hierarchies).<br>\nOptions are:<br>\n\t+ allow_multiselection: allow to select multiple elements using the shift key<br>\n\t+ allow_rename: double click to rename items in the tree<br>\n\t+ allow_drag: drag elements around<br>\n\t+ height<br>\nItem data should be in the next format:<br>\n{<br>\n   id: unique_identifier,<br>\n   content: what to show in the HTML (if omited id will be shown)<br>\n\t children: []  array with another object with the same structure<br>\n\t className: class<br>\n   precontent: HTML inserted before the content<br>\n\t visible: boolean, to hide it<br>\n\t dataset: dataset for the element<br>\n\t onDragData: callback in case the user drags this item somewhere else<br>\n}<br>\nTo catch events use tree.root.addEventListener(...)<br>\nitem_selected : receive { item: node, data: node.data }<br>\nitem_dblclicked<br>\nitem_renamed<br>\nitem_moved<br>",
            "is_constructor": 1
        },
        "SearchBox": {
            "name": "SearchBox",
            "shortname": "SearchBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/widgets.js",
            "line": 36,
            "description": "SearchBox",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "ContextMenu": {
            "name": "ContextMenu",
            "shortname": "ContextMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/widgets.js",
            "line": 69,
            "description": "ContextMenu",
            "is_constructor": 1,
            "params": [
                {
                    "name": "values",
                    "description": "(allows object { title: \"Nice text\", callback: function ... })",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "[optional] Some options:\\\n- title: title to show on top of the menu\n- callback: function to call when an option is clicked, it receives the item information\n- ignore_item_callbacks: ignores the callback inside the item, it just calls the options.callback \n- event: you can pass a MouseEvent, this way the ContextMenu appears in that position",
                    "type": "Object"
                }
            ]
        },
        "List": {
            "name": "List",
            "shortname": "List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/widgets.js",
            "line": 479,
            "description": "List",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Slider": {
            "name": "Slider",
            "shortname": "Slider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/widgets.js",
            "line": 562,
            "description": "Slider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "LineEditor": {
            "name": "LineEditor",
            "shortname": "LineEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/widgets.js",
            "line": 659,
            "description": "LineEditor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "../src/area.js",
            "line": 5,
            "class": "Area"
        },
        {
            "file": "../src/area.js",
            "line": 550,
            "class": "Area"
        },
        {
            "file": "../src/core.js",
            "line": 26,
            "description": "initializes the lib, must be called",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "options",
                    "description": "some options are container, menubar,",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 88,
            "description": "Triggers a simple event in an object (similar to jQuery.trigger)",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "element",
                    "description": "could be an HTMLEntity or a regular object",
                    "type": "Object"
                },
                {
                    "name": "event_name",
                    "description": "the type of the event",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "it will be stored in e.detail",
                    "type": "*"
                },
                {
                    "name": "origin",
                    "description": "it will be stored in e.srcElement",
                    "type": "*"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 109,
            "description": "Binds an event in an object (similar to jQuery.bind)\nIf the element is not an HTML entity a new one is created, attached to the object (as non-enumerable, called __events) and used",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "element",
                    "description": "could be an HTMLEntity, a regular object, a query string or a regular Array of entities",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "the string defining the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "where to call",
                    "type": "Function"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 159,
            "description": "Unbinds an event in an object (similar to jQuery.unbind)",
            "itemtype": "method",
            "name": "unbind",
            "params": [
                {
                    "name": "element",
                    "description": "could be an HTMLEntity or a regular object",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "the string defining the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "where to call",
                    "type": "Function"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 174,
            "description": "Appends litegui widget to the global interface",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "litegui_element",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 184,
            "description": "Remove from the interface, it is is an HTML element it is removed from its parent, if it is a widget the same.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "litegui_element",
                    "description": "it also supports HTMLentity, selector string or Array of elements",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 215,
            "description": "wrapper of document.getElementById",
            "itemtype": "method",
            "name": "getById",
            "params": [
                {
                    "name": "id\nreturn",
                    "description": "{HTMLEntity}",
                    "type": "String"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 260,
            "description": "Change cursor",
            "itemtype": "method",
            "name": "setCursor",
            "params": [
                {
                    "name": "cursor",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 270,
            "description": "Test if the cursor is inside an element",
            "itemtype": "method",
            "name": "setCursor",
            "params": [
                {
                    "name": "cursor",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 293,
            "description": "Copy a string to the clipboard (it needs to be invoqued from a click event)",
            "itemtype": "method",
            "name": "toClipboard",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "force_local",
                    "description": "force to store the data in the browser clipboard (this one can be read back)",
                    "type": "Boolean"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 338,
            "description": "Reads from the secondary clipboard (only can read if the data was stored using the toClipboard)",
            "itemtype": "method",
            "name": "getLocalClipboard",
            "return": {
                "description": "clipboard",
                "type": "String"
            },
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 355,
            "description": "Insert some CSS code to the website",
            "itemtype": "method",
            "name": "addCSS",
            "params": [
                {
                    "name": "code",
                    "description": "it could be a string with CSS rules, or an object with the style syntax.",
                    "type": "String|Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 380,
            "description": "Requires a new CSS",
            "itemtype": "method",
            "name": "requireCSS",
            "params": [
                {
                    "name": "url",
                    "description": "string with url or an array with several urls",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 406,
            "description": "Request file from url (it could be a binary, text, etc.). If you want a simplied version use",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "request",
                    "description": "object with all the parameters like data (for sending forms), dataType, success, error",
                    "type": "Object"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 496,
            "description": "Request file from url",
            "itemtype": "method",
            "name": "requestText",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "on_error",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 508,
            "description": "Request file from url",
            "itemtype": "method",
            "name": "requestJSON",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "on_error",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 520,
            "description": "Request binary file from url",
            "itemtype": "method",
            "name": "requestBinary",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "on_error",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 533,
            "description": "Request script and inserts it in the DOM",
            "itemtype": "method",
            "name": "requireScript",
            "params": [
                {
                    "name": "url",
                    "description": "the url of the script or an array containing several urls",
                    "type": "String|Array"
                },
                {
                    "name": "on_complete",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "on_error",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "on_progress",
                    "description": "(if several files are required, on_progress is called after every file is added to the DOM)",
                    "type": "Function"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 619,
            "description": "Request script and inserts it in the DOM",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "tag",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id_class",
                    "description": "string containing id and classes, example: \"myid .someclass .anotherclass\"",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 665,
            "description": "Request script and inserts it in the DOM",
            "itemtype": "method",
            "name": "createButton",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "when the button is pressed",
                    "type": "Function"
                },
                {
                    "name": "style",
                    "description": "",
                    "type": "Object|String"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 757,
            "description": "Shows a dialog with a message",
            "itemtype": "method",
            "name": "popup",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "( min_height, content, noclose )",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 782,
            "description": "Shows an alert dialog with a message",
            "itemtype": "method",
            "name": "alert",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "( title, width, height, content, noclose )",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 803,
            "description": "Shows a confirm dialog with a message",
            "itemtype": "method",
            "name": "confirm",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "( title, width, height, content, noclose )",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 839,
            "description": "Shows a prompt dialog with a message",
            "itemtype": "method",
            "name": "prompt",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "( title, width, height, content, noclose )",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 899,
            "description": "Shows a choice dialog with a message",
            "itemtype": "method",
            "name": "choice",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "( title, width, height, content, noclose )",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 981,
            "description": "Returns the URL vars ( ?foo=faa&foo2=etc )",
            "itemtype": "method",
            "name": "getUrlVars",
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 1011,
            "description": "Makes one element draggable",
            "itemtype": "method",
            "name": "draggable",
            "params": [
                {
                    "name": "container",
                    "description": "the element that will be dragged",
                    "type": "HTMLEntity"
                },
                {
                    "name": "dragger",
                    "description": "the area to start the dragging",
                    "type": "HTMLEntity"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 1086,
            "description": "Clones object content",
            "itemtype": "method",
            "name": "cloneObject",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 1162,
            "description": "Convert sizes in any format to a valid CSS format (number to string, negative number to calc( 100% - number px )",
            "itemtype": "method",
            "name": "sizeToCSS",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "String||Number"
                }
            ],
            "return": {
                "description": "valid css size string",
                "type": "String"
            },
            "class": "LiteGUI"
        },
        {
            "file": "../src/core.js",
            "line": 1179,
            "description": "Helper, makes drag and drop easier by enabling drag and drop in a given element",
            "itemtype": "method",
            "name": "createDropArea",
            "params": [
                {
                    "name": "element",
                    "description": "the element where users could drop items",
                    "type": "HTMLElement"
                },
                {
                    "name": "callback_drop",
                    "description": "function to call when the user drops the item",
                    "type": "Function"
                },
                {
                    "name": "callback_enter",
                    "description": "[optional] function to call when the user drags something inside",
                    "type": "Function"
                }
            ],
            "class": "LiteGUI"
        },
        {
            "file": "../src/dialog.js",
            "line": 2,
            "class": "Dialog"
        },
        {
            "file": "../src/dialog.js",
            "line": 147,
            "description": "add widget or html to the content of the dialog",
            "itemtype": "method",
            "name": "add",
            "class": "Dialog"
        },
        {
            "file": "../src/dialog.js",
            "line": 371,
            "description": "destroys the dialog",
            "itemtype": "method",
            "name": "close",
            "class": "Dialog"
        },
        {
            "file": "../src/dialog.js",
            "line": 493,
            "description": "shows a hidden dialog",
            "itemtype": "method",
            "name": "show",
            "class": "Dialog"
        },
        {
            "file": "../src/dialog.js",
            "line": 522,
            "description": "hides the dialog",
            "itemtype": "method",
            "name": "hide",
            "class": "Dialog"
        },
        {
            "file": "../src/dialog.js",
            "line": 580,
            "description": "Adjust the size of the dialog to the size of the content",
            "itemtype": "method",
            "name": "adjustSize",
            "params": [
                {
                    "name": "margin",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Dialog"
        },
        {
            "file": "../src/dragger.js",
            "line": 3,
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 96,
            "description": "Removes all the widgets inside the inspector",
            "itemtype": "method",
            "name": "clear",
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 120,
            "description": "Tryes to refresh (calls on_refresh)",
            "itemtype": "method",
            "name": "refresh",
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 205,
            "itemtype": "method",
            "name": "getWidget",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the widget supplied when creating it or the number of the widget",
                    "type": "String"
                }
            ],
            "return": {
                "description": "widget object",
                "type": "Object"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 218,
            "itemtype": "method",
            "name": "inspectInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "the instance that you want to inspect, attributes will be collected from this object",
                    "type": "Object"
                },
                {
                    "name": "properties",
                    "description": "an array with all the names of the properties you want to inspect, \n\t\t  if not specified then it calls getProperties, othewise collect them and tries to guess the type",
                    "type": "Array"
                },
                {
                    "name": "properties_info_example",
                    "description": "it overwrites the info about properties found in the object (in case the automaticaly guessed type is wrong)",
                    "type": "Object"
                },
                {
                    "name": "properties_to_skip",
                    "description": "this properties will be ignored",
                    "type": "Array"
                }
            ],
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 320,
            "itemtype": "method",
            "name": "collectPropertier",
            "params": [
                {
                    "name": "instance",
                    "description": "extract enumerable and public (name do not start with '_' ) properties from an object\n return {Object} object with \"name\" : value for every property",
                    "type": "Object"
                }
            ],
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 343,
            "itemtype": "method",
            "name": "showProperties",
            "params": [
                {
                    "name": "instance",
                    "description": "the instance that you want to inspect",
                    "type": "Object"
                },
                {
                    "name": "properties_info",
                    "description": "object containing   \"property_name\" :{ type: value, widget:..., min:..., max:... }  or just \"property\":\"type\"",
                    "type": "Object"
                },
                {
                    "name": "properties_to_skip",
                    "description": "this properties will be ignored",
                    "type": "Array"
                }
            ],
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 401,
            "description": "Tryes to assigns a value to the instance stored in this.instance",
            "itemtype": "method",
            "name": "assignValue",
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 427,
            "description": "Used by all widgets to create the container of one widget",
            "itemtype": "method",
            "name": "createWidget",
            "params": [
                {
                    "name": "name",
                    "description": "the string to show at the left side of the widget, if null this element wont be created and the value part will use the full width",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "the string with the html of the elements that conform the interactive part of the widget",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "some generic options that any widget could have:\n- widget_name: the name used to store this widget in the widgets_by_name container, if omited the parameter name is used\n- width: the width of the widget (if omited it will use the Inspector widgets_width, otherwise 100%\n- name_width: the width of the name part of the widget, if not specified it will use Inspector name_width, otherwise css default\n- content_width: the width of the widget content area\n- pre_title: string to append to the left side of the name, this is helpful if you want to add icons with behaviour when clicked\n- title: string to replace the name, sometimes you want to supply a different name than the one you want to show (this is helpful to retrieve values from an inspector)",
                    "type": "Object"
                }
            ],
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 618,
            "description": "Adds a widgete to the inspector, its a way to provide the widget type from a string",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "type",
                    "description": "string specifying the name of the widget to use (check Inspector.widget_constructors for a complete list)",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "the string to show at the left side of the widget, if null this element wont be created and the value part will use the full width",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to assign to the widget",
                    "type": "String"
                },
                {
                    "name": "options:",
                    "description": "some generic options that any widget could have:\n- type: overwrites the type\n- callback: function to call when the user interacts with the widget and changes the value\n[For a bigger list check createWidget and every widget in particular]",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 685,
            "description": "Creates a line",
            "itemtype": "method",
            "name": "addSeparator",
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 726,
            "description": "Widget to edit strings",
            "itemtype": "method",
            "name": "addString",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- focus: true if you want the cursor to be here\n- password: true if you want to hide the string \n- immediate: calls the callback once every keystroke\n- disabled: shows the widget disabled\n- callback: function to call when the widget changes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 815,
            "description": "Widget to edit strings, but it adds a button behind (useful to search values somewhere in case the user do not remember the name)",
            "itemtype": "method",
            "name": "addStringButton",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the string to show",
                    "type": "String"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- disabled: shows the widget disabled\n- button: string to show inside the button, default is \"...\"\n- callback: function to call when the string is edited\n- callback_button: function to call when the button is pressed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 889,
            "description": "Widget to edit strings with multiline support",
            "itemtype": "method",
            "name": "addTextarea",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- focus: true if you want the cursor to be here\n- password: true if you want to hide the string \n- immediate: calls the callback once every keystroke\n- disabled: shows the widget disabled\n- callback: function to call when the widget changes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 942,
            "description": "Widget to edit numbers (it adds a dragging mini widget in the right side)",
            "itemtype": "method",
            "name": "addNumber",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- disabled: shows the widget disabled\n- callback: function to call when the string is edited\n- precision: number of digits after the colon\n- units: string to show after the number\n- min: minimum value accepted\n- max: maximum value accepted\n- step: increments when draggin the mouse (default is 0.1)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1035,
            "description": "Widget to edit two numbers (it adds a dragging mini widget in the right side)",
            "itemtype": "method",
            "name": "addVector2",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Vec2"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- callback: function to call once the value changes\n- disabled: shows the widget disabled\n- callback: function to call when the string is edited\n- precision: number of digits after the colon\n- units: string to show after the number\n- min: minimum value accepted\n- max: maximum value accepted\n- step: increments when draggin the mouse (default is 0.1)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1138,
            "description": "Widget to edit two numbers (it adds a dragging mini widget in the right side)",
            "itemtype": "method",
            "name": "addVector3",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Vec3"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- callback: function to call once the value changes\n- disabled: shows the widget disabled\n- callback: function to call when the string is edited\n- precision: number of digits after the colon\n- units: string to show after the number\n- min: minimum value accepted\n- max: maximum value accepted\n- step: increments when draggin the mouse (default is 0.1)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1246,
            "description": "Widget to edit two numbers (it adds a dragging mini widget in the right side)",
            "itemtype": "method",
            "name": "addVector4",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Vec4"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- callback: function to call once the value changes\n- disabled: shows the widget disabled\n- callback: function to call when the string is edited\n- precision: number of digits after the colon\n- units: string to show after the number\n- min: minimum value accepted\n- max: maximum value accepted\n- step: increments when draggin the mouse (default is 0.1)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1343,
            "description": "Widget to edit two numbers using a rectangular pad where you can drag horizontaly and verticaly a handler",
            "itemtype": "method",
            "name": "addPad",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Vec2"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- callback: function to call once the value changes\n- disabled: shows the widget disabled\n- callback: function to call when the string is edited\n- precision: number of digits after the colon\n- units: string to show after the number\n- min: minimum value accepted\n- minx: minimum x value accepted\n- miny: minimum y value accepted\n- max: maximum value accepted\n- maxx: maximum x value accepted\n- maxy: maximum y value accepted\n- step: increments when draggin the mouse (default is 0.1)\n- background: url of image to use as background (it will be streched)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1494,
            "description": "Widget to show plain information in HTML (not interactive)",
            "itemtype": "method",
            "name": "addInfo",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "HTML code",
                    "type": "String"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- className: to specify a classname of the content\n- height: to specify a height",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1559,
            "description": "Widget to edit a number using a slider",
            "itemtype": "method",
            "name": "addSlider",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- min: min value\n- max: max value\n- step: increments when dragging\n- callback: function to call once the value changes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1631,
            "description": "Widget to edit a boolean value using a checkbox",
            "itemtype": "method",
            "name": "addCheckbox",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- label: text to show, otherwise it shows on/off\n- label_on: text to show when on\n- label_off: text to show when off\n- callback: function to call once the value changes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1690,
            "description": "Widget to edit a set of boolean values using checkboxes",
            "itemtype": "method",
            "name": "addFlags",
            "params": [
                {
                    "name": "value",
                    "description": "object that contains all the booleans",
                    "type": "Object"
                },
                {
                    "name": "optional",
                    "description": "object with extra flags to insert",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1723,
            "description": "Widget to edit an enumeration using a combobox",
            "itemtype": "method",
            "name": "addCombo",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- values: a list with all the possible values, it could be an array, or an object, in case of an object, the key is the string to show, the value is the value to assign\n- disabled: true to disable\n- callback: function to call once an items is clicked",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 1957,
            "description": "Widget to select from a list of items",
            "itemtype": "method",
            "name": "addList",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "[Array or Object]",
                    "type": "*"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- multiselection: allow multiple selection\n- callback: function to call once an items is clicked\n- selected: the item selected",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 2656,
            "description": "Widget to edit an array of values of a certain type",
            "itemtype": "method",
            "name": "addArray",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options,",
                    "description": "here is a list for this widget (check createWidget for a list of generic options):\n- data_type: the type of every value inside the array\n- data_options: options for the widgets of every item in the array\n- max_items: max number of items to show from the array, default is 100\n- callback: function to call once an items inside the array has changed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/inspector.js",
            "line": 2971,
            "description": "Creates a title bar in the widgets list to help separate widgets",
            "itemtype": "method",
            "name": "addTitle",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the widget in the form of the DOM element that contains it",
                "type": "HTMLElement"
            },
            "class": "Inspector"
        },
        {
            "file": "../src/menubar.js",
            "line": 3,
            "class": "Tabs"
        },
        {
            "file": "../src/panel.js",
            "line": 4,
            "class": "Tabs"
        },
        {
            "file": "../src/tabs.js",
            "line": 1,
            "class": "Tabs"
        },
        {
            "file": "../src/tabs.js",
            "line": 110,
            "description": "Returns the currently selected tab in the form of a tab object",
            "itemtype": "method",
            "name": "getCurrentTab",
            "return": {
                "description": "the tab in the form of an object with {id,tab,content}",
                "type": "Object"
            },
            "class": "Tabs"
        },
        {
            "file": "../src/tabs.js",
            "line": 127,
            "description": "Returns the last tab pressed before this one. used to know from which tab we come",
            "itemtype": "method",
            "name": "getCurrentTab",
            "return": {
                "description": "the tab in the form of an object with {id,tab,content}",
                "type": "Object"
            },
            "class": "Tabs"
        },
        {
            "file": "../src/tabs.js",
            "line": 147,
            "description": "Returns a tab given its id",
            "itemtype": "method",
            "name": "getTab",
            "params": [
                {
                    "name": "id",
                    "description": "tab id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the tab in the form of an object with {id,tab,content}",
                "type": "Object"
            },
            "class": "Tabs"
        },
        {
            "file": "../src/tabs.js",
            "line": 158,
            "description": "Returns a tab given its index in the tabs list",
            "itemtype": "method",
            "name": "getTabByIndex",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tab in the form of an object with {id,tab,content}",
                "type": "Object"
            },
            "class": "Tabs"
        },
        {
            "file": "../src/tabs.js",
            "line": 169,
            "description": "Returns how many tabs there is",
            "itemtype": "method",
            "name": "getNumOfTabs",
            "return": {
                "description": "number of tabs",
                "type": "Number"
            },
            "class": "Tabs"
        },
        {
            "file": "../src/tabs.js",
            "line": 182,
            "description": "Returns the content HTML element of a tab",
            "itemtype": "method",
            "name": "getTabContent",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "content",
                "type": "HTMLEntity"
            },
            "class": "Tabs"
        },
        {
            "file": "../src/tabs.js",
            "line": 195,
            "description": "Returns the index of a tab (the position in the tabs list)",
            "itemtype": "method",
            "name": "getTabIndex",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "index",
                "type": "Number"
            },
            "class": "Tabs"
        },
        {
            "file": "../src/tabs.js",
            "line": 213,
            "description": "Create a new tab, where id is a unique identifier",
            "itemtype": "method",
            "name": "addTab",
            "params": [
                {
                    "name": "id",
                    "description": "could be null then a random id is generated",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "{ \n\ttitle: tab text, \n\tcallback: called when selected, \n\tcallback_leave: callback when leaving, \n  callback_context: on right click on tab\n  callback_canopen: used to block if this tab can be opened or not (if it returns true then yes)\n\tcontent: HTML content, \n  closable: if it can be closed (callback is onclose), \n\ttab_width: size of the tab,\n\ttab_className: classes for the tab element,\n\tid: content id,\n\tsize: full means all,\n\tmode: \"vertical\" or \"horizontal\",\n\tbutton: if it is a button tab, not a selectable tab\n\t}",
                    "type": "Object"
                },
                {
                    "name": "skip_event",
                    "description": "prevent dispatching events",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "an object containing { id, tab, content }",
                "type": "Object"
            },
            "class": "Tabs"
        },
        {
            "file": "../src/tree.js",
            "line": 33,
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 94,
            "description": "update tree with new data (old data will be thrown away)",
            "itemtype": "method",
            "name": "updateTree",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 113,
            "description": "update tree with new data (old data will be thrown away)",
            "itemtype": "method",
            "name": "insertItem",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "parent_id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "position",
                    "description": "index in case you want to add it before the last position",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DIVElement"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 638,
            "description": "remove from the tree the items that do not have a name that matches the string",
            "itemtype": "method",
            "name": "filterByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 677,
            "description": "remove from the tree the items that do not have a name that matches the string",
            "itemtype": "method",
            "name": "filterByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 717,
            "description": "get the item with that id, returns the HTML element",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 754,
            "description": "in case an item is collapsed, it expands it to show children",
            "itemtype": "method",
            "name": "expandItem",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 771,
            "description": "in case an item is expanded, it collapses it to hide children",
            "itemtype": "method",
            "name": "collapseItem",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 789,
            "description": "Tells you if the item its out of the view due to the scrolling",
            "itemtype": "method",
            "name": "isInsideArea",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 812,
            "description": "Scrolls to center this item",
            "itemtype": "method",
            "name": "scrollToItem",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 837,
            "description": "mark item as selected",
            "itemtype": "method",
            "name": "setSelectedItem",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 869,
            "description": "adds item to selection (multiple selection)",
            "itemtype": "method",
            "name": "addItemToSelection",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 887,
            "description": "remove item from selection (multiple selection)",
            "itemtype": "method",
            "name": "removeItemFromSelection",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 902,
            "description": "returns the first selected item (its HTML element)",
            "itemtype": "method",
            "name": "getSelectedItem",
            "return": {
                "description": "",
                "type": "HTML"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 912,
            "description": "returns an array with the selected items (its HTML elements)",
            "itemtype": "method",
            "name": "getSelectedItems",
            "return": {
                "description": "",
                "type": "HTML"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 922,
            "description": "returns if an item is selected",
            "itemtype": "method",
            "name": "isItemSelected",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 936,
            "description": "returns the children of an item",
            "itemtype": "method",
            "name": "getChildren",
            "params": [
                {
                    "name": "id",
                    "description": "could be string or node directly",
                    "type": "String"
                },
                {
                    "name": "only_direct",
                    "description": "to get only direct children",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 950,
            "description": "returns the parent of a item",
            "itemtype": "method",
            "name": "getParent",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "HTML"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 964,
            "description": "returns an array with all the ancestors",
            "itemtype": "method",
            "name": "getAncestors",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 982,
            "description": "returns an array with all the ancestors",
            "itemtype": "method",
            "name": "getAncestors",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 1002,
            "description": "move item with id to be child of parent_id",
            "itemtype": "method",
            "name": "moveItem",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "parent_id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 1078,
            "description": "remove item with given id",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 1116,
            "description": "update a given item with new data",
            "itemtype": "method",
            "name": "updateItem",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 1141,
            "description": "update a given item id and the link with its children",
            "itemtype": "method",
            "name": "updateItemId",
            "params": [
                {
                    "name": "old_id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "new_id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree.js",
            "line": 1166,
            "description": "clears all the items",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "keep_root",
                    "description": "if you want to keep the root item",
                    "type": "Bool"
                }
            ],
            "class": "Tree"
        },
        {
            "file": "../src/tree_old.js",
            "line": 4,
            "class": "SearchBox"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type",
            "line": " ../src/area.js:5"
        },
        {
            "message": "Missing item type",
            "line": " ../src/area.js:550"
        },
        {
            "message": "Missing item type",
            "line": " ../src/dialog.js:2"
        },
        {
            "message": "Missing item type",
            "line": " ../src/dragger.js:3"
        },
        {
            "message": "Missing item type",
            "line": " ../src/menubar.js:3"
        },
        {
            "message": "Missing item type",
            "line": " ../src/panel.js:4"
        },
        {
            "message": "Missing item type",
            "line": " ../src/tabs.js:1"
        },
        {
            "message": "Missing item type",
            "line": " ../src/tree.js:33"
        },
        {
            "message": "Missing item type",
            "line": " ../src/tree_old.js:4"
        }
    ]
}